package com.github.goldin.plugins.gradle.about

import com.github.goldin.plugins.gradle.common.BaseTask
import org.gcontracts.annotations.Ensures
import org.gcontracts.annotations.Requires
import org.gradle.api.plugins.ProjectReportsPlugin
import org.gradle.api.tasks.bundling.Jar
import org.gradle.api.tasks.diagnostics.DependencyReportTask
import org.gradle.api.tasks.diagnostics.internal.AsciiReportRenderer

import java.text.SimpleDateFormat


/**
 * {@link AboutPlugin} task
 */
class AboutTask extends BaseTask
{
    private final Map<String, String> env = System.getenv().asImmutable()
    private AboutExtension ext () { extension ( AboutPlugin.EXTENSION_NAME, AboutExtension ) }


    @Requires({ s != null})
    @Ensures({ result != null })
    private String padLines ( String s )
    {
        if ( ! s ) { return '' }

        def padWidth = ' Status        : ['.size()
        def lines    = s.readLines()

        ( lines ? ( lines[ 0 ] + (( lines.size() > 1 ) ? '\n' + lines[ 1 .. -1 ].collect { '|' + ( ' ' * padWidth ) + it }.join( '\n' ) :
                                                         '' )) :
                  '' )
    }


    @Requires({ prefix && ( list != null ) })
    @Ensures({ result != null })
    private String find ( String prefix, List<String> list )
    {
        list.find{ it.startsWith( prefix ) }?.replace( prefix, '' )?.trim() ?: ''
    }


    @Requires({ map })
    @Ensures({ result })
    private String sort ( Map<String,String> map )
    {
        def maxKey = map.keySet()*.size().max() + 3
        map.sort().collect { String key, String value ->
                             "[$key]".padRight( maxKey ) + ":[$value]" }.
                   join( '\n' )
    }


    void taskAction()
    {
        final ext       = ext()
        final jarTask   = ( Jar ) project.tasks[ 'jar' ]
        final directory = ext.directory ?: jarTask.destinationDir
        final fileName  = ext.fileName  ?: "about-${project.group}-${project.name}-${project.version}.txt"
        final split     = { String s -> ( List<String> )( s ? s.split( /,/ ).toList()*.trim().findAll{ it } : null ) }
        final files     = files( directory, split( ext.include ), split( ext.exclude ))
        final tempFile  = new File( jarTask.temporaryDir, fileName )
        final prefix    = (( ext.prefix == '/' ) ? '' : ext.prefix )

        logger.info( "Generating \"about\" in [$tempFile.canonicalPath] .." )

        tempFile.write(( ' Generated by http://evgeny-goldin.com/wiki/Gradle-about-plugin\n' +
                         scmContent() + buildContent() + serverContent()).
                       stripMargin().readLines()*.replaceAll( /\s+$/, '' ).findAll { it }. // Deleting empty lines
                       join(( 'windows' == ext.endOfLine ) ? '\r\n' : '\n' ))

        logger.info( "Generated  \"about\" in [$tempFile.canonicalPath]" )

        for ( file in files )
        {
            def aboutPath = "$file.canonicalPath/$prefix${ prefix ? '/' : '' }$fileName"
            logger.info( "Adding \"about\" to [$aboutPath] .." )

            ant.zip( destfile : file.canonicalPath,
                     update   : true ){
                zipfileset( file   : tempFile.canonicalPath,
                            prefix : prefix )
            }

            logger.info( "Added  \"about\" to [$aboutPath]" )
        }

        delete( tempFile )
    }


    @Ensures({ result })
    String jenkinsContent()
    {
        // https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project

        """
        |===============================================================================
        | Jenkins Info
        |===============================================================================
        | Server        : [${ env[ 'JENKINS_URL' ] }]
        | Job           : [${ env[ 'JENKINS_URL' ] }job/${ env[ 'JOB_NAME' ] }/${ env[ 'BUILD_NUMBER' ]}/]
        | Log           : [${ env[ 'JENKINS_URL' ] }job/${ env[ 'JOB_NAME' ] }/${ env[ 'BUILD_NUMBER' ]}/console]"""
    }


    @Ensures({ result })
    String hudsonContent()
    {
        // http://weblogs.java.net/blog/johnsmart/archive/2008/03/using_hudson_en.html

        """
        |===============================================================================
        | Hudson Info
        |===============================================================================
        | Server        : [${ env[ 'HUDSON_URL' ] }]
        | Job           : [${ env[ 'HUDSON_URL' ] }job/${ env[ 'JOB_NAME' ] }/${ env[ 'BUILD_NUMBER' ]}/]
        | Log           : [${ env[ 'HUDSON_URL' ] }job/${ env[ 'JOB_NAME' ] }/${ env[ 'BUILD_NUMBER' ]}/console]"""
    }


    @Ensures({ result })
    String teamcityContent()
    {
        // http://confluence.jetbrains.net/display/TCD65/Predefined+Build+Parameters

        """
        |===============================================================================
        | TeamCity Info
        |===============================================================================
        | Project Name  : [${ env[ 'TEAMCITY_PROJECT_NAME' ] }]
        | Build Config  : [${ env[ 'TEAMCITY_BUILDCONF_NAME' ] }]
        | Build Number  : [${ env[ 'BUILD_NUMBER' ] }]"""
    }


    @Ensures({ result })
    String serverContent()
    {
        ( env[ 'JENKINS_URL'      ] ? jenkinsContent()  :
          env[ 'HUDSON_URL'       ] ? hudsonContent()   :
          env[ 'TEAMCITY_VERSION' ] ? teamcityContent() :
                                      '' )  +
        '''
        |==============================================================================='''
    }


    @Ensures({ result })
    String buildContent ()
    {
        final ext       = ext()
        final Map props = System.properties
        final format    = new SimpleDateFormat( "dd MMM, EEEE, yyyy, HH:mm:ss (zzzzzz:'GMT'ZZZZZZ)", Locale.ENGLISH )

        """
        |===============================================================================
        | Build Info
        |===============================================================================
        | Host          : [${ ( env[ 'COMPUTERNAME' ] ?: env[ 'HOSTNAME' ] ?: exec( 'hostname' ) ?: '' ).trim() }]
        | Build Time    : [${ format.format( new Date()) }]
        | User          : [${ props[ 'user.name' ] }]
        | ${ ext.includePaths ? 'Directory     : [' + props[ 'user.dir' ] + ']': '' }
        | Java          : [${ props[ 'java.version' ] }][${ props[ 'java.vm.vendor' ] }]${ ext.includePaths ? '[' + props[ 'java.home' ] + ']' : '' }[${ props[ 'java.vm.name' ] }]
        | OS            : [${ props[ 'os.name' ] }][${ props[ 'os.arch' ] }][${ props[ 'os.version' ] }]
        |===============================================================================
        | Gradle Info
        |===============================================================================
        | ${ ext.includePaths ? 'Home          : [' + gradle.gradleHomeDir.canonicalPath + ']' : '' }
        | ${ ext.includePaths ? 'Project dir   : [' + project.projectDir.canonicalPath + ']': '' }
        | ${ ext.includePaths ? 'Build file    : [' + ( project.buildFile ?: project.rootProject.buildFile ).canonicalPath + ']' : '' }
        | GRADLE_OPTS   : [${ env[ 'GRADLE_OPTS' ] ?: '' }]
        | Version       : [${ gradle.gradleVersion }]
        | Project       : [${ ext.includePaths ? project.toString() : project.toString().replaceAll( /\s+@.+/, '' )}]
        | Tasks         : ${ gradle.startParameter.taskNames }
        | Coordinates   : [$project.group:$project.name:$project.version]
        | ${ ext.includeDependencies ? 'Dependencies  : [' + padLines( dependenciesContent()) + ']' : '' }""" +

        ( ext.includeSystem ?

        """
        |===============================================================================
        | System Properties
        |===============================================================================
        |${ sort( props ) }""" : '' ) +

        ( ext.includeEnv ?

        """
        |===============================================================================
        | Environment Variables
        |===============================================================================
        |${ sort( env ) }""" : '' )
    }


    @Ensures({ result })
    String dependenciesContent ()
    {
        project.plugins.apply( ProjectReportsPlugin )

        final task          = ( DependencyReportTask ) project.tasks[ ProjectReportsPlugin.DEPENDENCY_REPORT ]
        final renderer      = new AsciiReportRenderer()
        final file          = delete( new File( project.buildDir, 'dependencies.txt' ))
        final line          = '-' * 80
        renderer.outputFile = file
        task.renderer       = renderer
        task.generate( project )

        assert file.file, "File [$file.canonicalPath] was not created by dependency report"

        "$line\n" + file.text.replaceAll( /(?m)^\s*$/, line ) // Empty lines are replaced by LINE
    }


    @Ensures({ result })
    String scmContent()
    {
        final ext = ext()
        if ( ! ext.includeSCM ) { return '' }

        File   svnDir           = new File( project.rootDir, '.svn' )
        String svnVersion       = null
        String svnStatus        = null
        String gitVersion       = null
        String gitStatusCommand = null
        String gitStatus        = null

        /**
         * Trying SVN
         */

        if ( svnDir.directory )
        {
            svnVersion = exec( 'svn --version' )
            if ( svnVersion.toLowerCase().contains( 'svn, version' ))
            {
                svnStatus = exec( "svn status ${ project.projectDir.canonicalPath }" )
                if (( ! svnStatus.contains( 'is not a working copy' )) &&
                    ( ! svnStatus.contains( 'containing working copy admin area is missing' )))
                {
                    return svnContent( svnStatus )
                }
            }
        }

        /**
         * Trying Git
         */

        gitVersion = gitExec( '--version' )

        if ( gitVersion.contains( 'git version' ))
        {
            gitStatusCommand = 'status' + ( ext.gitStatusProject ? '' : ' ' + rootDir.canonicalPath )
            gitStatus        = gitExec( gitStatusCommand )

            if ( ! gitStatus.contains( 'fatal: Not a git repository' ))
            {
                return gitContent( gitStatus )
            }
        }

        """
        |===============================================================================
        | SCM Info
        |===============================================================================
        | Unsupported SCM system: either project is not managed by SVN/Git or corresponding command-line clients are not available.
        | Tried SVN:
        | ~~~~~~~~~~
        | [$svnDir.canonicalPath] - ${ svnDir.directory ? 'found' : 'not found' }
        | ${ svnVersion ? '"svn --version" returned [' + svnVersion + ']'                           : '' }
        | ${ svnStatus  ? '"svn status ' + rootDir.canonicalPath + '" returned [' + svnStatus + ']' : '' }
        | Tried Git:
        | ~~~~~~~~~~
        | ${ gitVersion ? '"git --version" returned [' + gitVersion + ']'                            : '' }
        | ${ gitStatus  ? '"' + gitStatusCommand + '" returned [' + gitStatus + ']'                  : '' }"""
    }


    @Requires({ svnStatus })
    @Ensures({ result })
    String svnContent( String svnStatus )
    {
        def svnInfo = exec( "svn info ${rootDir.canonicalPath}" ).readLines()
        def commit  = exec( 'svn log -l 1' ).readLines()[ 1 ]

        """
        |===============================================================================
        | SVN Info
        |===============================================================================
        | Repository    : [${ find( 'URL:',      svnInfo )}]
        | Revision      : [${ find( 'Revision:', svnInfo )}]
        | Status        : [${ padLines( svnStatus ) }]
        | Last Commit   : [$commit]
        | Commit Date   : [${ commit.split( '\\|' )[ 2 ].trim() }]
        | Commit Author : [${ commit.split( '\\|' )[ 1 ].trim() }]"""
    }


    @Requires({ gitStatus })
    @Ensures({ result })
    String gitContent( String gitStatus )
    {
        final ext    = ext()
        final gitLog = gitExec( 'log -1' ).readLines()

        """
        |===============================================================================
        | Git Info
        |===============================================================================
        | Repositories  : [${ padLines( gitExec( 'remote -v' )) }]
        | Branch        : [${ find( '# On branch', gitStatus.readLines()) }]
        | ${ ext.gitStatusProject ? 'Project' : 'Basedir' } Status: [${ padLines( gitStatus ) }]
        | Last Commit   : [${ find( 'commit',      gitLog )}]
        | Commit Date   : [${ find( 'Date:',       gitLog )}]
        | Commit Author : [${ find( 'Author:',     gitLog )}]"""
    }
}
