assert project

def codenarcProp ( name, defaultValue ) { project.hasProperty( name ) ? project.property( name ) : defaultValue }
def codenarcVersion             = codenarcProp( 'codenarcVersion',    '0.14' )
def codenarcConfig              = codenarcProp( 'codenarcConfig',     'codenarc.groovy'  )
def codenarcReportDir           = codenarcProp( 'codenarcReportDir',  'reports/codenarc' )
def codenarcReportType          = codenarcProp( 'codenarcReportType', 'html' )
def codenarcReportFile          = codenarcProp( 'codenarcReportFile', 'codenarc.html' )
def codenarcSources             = codenarcProp( 'codenarcSources',    'src/main/groovy, src/test/groovy' )
def codenarcPriority1Violations = codenarcProp( 'codenarcPriority1Violations', 0 )
def codenarcPriority2Violations = codenarcProp( 'codenarcPriority2Violations', 0 )
def codenarcPriority3Violations = codenarcProp( 'codenarcPriority3Violations', 0 )


configurations {
    codenarc
}

dependencies   {
    codenarc  ( "org.codenarc:CodeNarc:$codenarcVersion" ){ exclude group: 'ant' }
    codenarc  "org.apache.ant:ant:1.8.2"
}


/**
 * Runs CodeNarc inspections on Groovy sources
 * http://codenarc.sourceforge.net/codenarc-ant-task.html
 */
task codenarc() {

    description = 'Runs CodeNarc inspections on Groovy sources.'

    doFirst {
        File configFile = rootProject.file( codenarcConfig  )
        File reportDir  = new File(( String ) codenarcReportDir )

        assert configFile.isFile()
        assert reportDir.isDirectory() || reportDir.mkdirs()

        ant.taskdef( name     : 'codenarc',
                     classname: 'org.codenarc.ant.CodeNarcTask',
                     classpath: configurations.codenarc.asPath )

        ant.codenarc ( ruleSetFiles          : "file:$configFile.canonicalPath",
                       maxPriority1Violations: codenarcPriority1Violations,
                       maxPriority2Violations: codenarcPriority2Violations,
                       maxPriority3Violations: codenarcPriority3Violations ) {
             report  ( type   : codenarcReportType ) {
                 option name  : 'outputFile',
                        value : new File(( File ) reportDir, ( String ) codenarcReportFile )
             }
             (( String ) codenarcSources ).split( ',' )*.trim().findAll{ it }.each {
                 fileset ( dir  : it )
             }
        }
    }
}
