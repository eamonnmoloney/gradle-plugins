
assert project && rootProject

String codenarcProp ( name, defaultValue ) { project.hasProperty( name ) ? project.property( name ) : defaultValue }
String codenarcVersion             = codenarcProp( 'codenarcVersion',    '0.14' )
String codenarcConfig              = codenarcProp( 'codenarcConfig',     'http://codenarc.sourceforge.net/StarterRuleSet-AllRulesByCategory.groovy.txt' )
String codenarcReportDir           = codenarcProp( 'codenarcReportDir',  'reports/codenarc' )
String codenarcReportType          = codenarcProp( 'codenarcReportType', 'html' )
String codenarcReportFile          = codenarcProp( 'codenarcReportFile', 'codenarc.html' )
String codenarcSources             = codenarcProp( 'codenarcSources',    'src/main/groovy, src/test/groovy' )
String codenarcPriority1Violations = codenarcProp( 'codenarcPriority1Violations', 0 )
String codenarcPriority2Violations = codenarcProp( 'codenarcPriority2Violations', 0 )
String codenarcPriority3Violations = codenarcProp( 'codenarcPriority3Violations', 0 )


repositories   { mavenRepo name : 'goldin-gradle-plugins',
                           urls : 'http://evgeny-goldin.org/artifactory/repo/' }
configurations { codenarc }
dependencies   {
    codenarc ( "org.codenarc:CodeNarc:$codenarcVersion" ){ exclude group: 'ant' }
    codenarc 'org.apache.ant:ant:1.8.2',
             'com.goldin.plugins:gradle:0.1-RC3' // For "log4j.xml"
}


/**
 * Runs CodeNarc inspections on Groovy sources
 * http://codenarc.sourceforge.net/codenarc-ant-task.html
 */
task codenarc() {

    description = 'Runs CodeNarc inspections on Groovy sources.'

    doFirst {

        List<File> sourceDirs = codenarcSources.split( ',' )*.trim().findAll{ it }.collect{ project.file( it ) }
        if ( ! sourceDirs.any{ it.isDirectory() }) { return }

        if ( ! codenarcConfig.startsWith( 'http://' ))
        {
            File   f = rootProject.file( codenarcConfig  )
            assert f, "CodeNarc config local file [$f.canonicalPath] is not found"
            codenarcConfig = "file:$f.canonicalPath"
        }

        File   reportDir = new File(( File ) project.buildDir, codenarcReportDir )
        assert reportDir.isDirectory() || reportDir.mkdirs()

        ant.taskdef( name      : 'codenarc',
                     classname : 'org.codenarc.ant.CodeNarcTask',
                     classpath : configurations.codenarc.asPath )

        ant.codenarc ( ruleSetFiles           : codenarcConfig,
                       maxPriority1Violations : codenarcPriority1Violations,
                       maxPriority2Violations : codenarcPriority2Violations,
                       maxPriority3Violations : codenarcPriority3Violations ) {
             report  ( type  : codenarcReportType ) {
                option name  : 'outputFile',
                       value : new File(( File ) reportDir, codenarcReportFile )
             }
             sourceDirs.each { if ( it.isDirectory()){ fileset ( dir : it ) }}
        }
    }
}
