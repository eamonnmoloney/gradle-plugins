
assert project && rootProject

def codenarcProp                   = { String name, Object defaultValue -> project.hasProperty( name ) ? project.property( name ) : defaultValue }
String codenarcVersion             = codenarcProp( 'codenarcVersion',      '0.14' )
List   codenarcRuleSetFiles        = ( List ) codenarcProp( 'codenarcRuleSetFiles', [ 'http://codenarc.sourceforge.net/StarterRuleSet-AllRulesByCategory.groovy.txt' ] )
String codenarcReportDir           = codenarcProp( 'codenarcReportDir',    'reports' )
String codenarcReportType          = codenarcProp( 'codenarcReportType',   'html' )
String codenarcReportTitle         = codenarcProp( 'codenarcReportTitle',  'CodeNarc Report' )
String codenarcReportFile          = codenarcProp( 'codenarcReportFile',   'codenarc.html' )
List   codenarcSources             = ( List ) codenarcProp( 'codenarcSources',      [ 'src/main/groovy, src/test/groovy' ] )
String codenarcPriority1Violations = codenarcProp( 'codenarcPriority1Violations', 0 )
String codenarcPriority2Violations = codenarcProp( 'codenarcPriority2Violations', 0 )
String codenarcPriority3Violations = codenarcProp( 'codenarcPriority3Violations', 0 )


repositories   { mavenCentral() }
configurations { codenarc }
dependencies   { codenarc ( "org.codenarc:CodeNarc:$codenarcVersion" ){ exclude group: 'ant' }}


/**
 * Runs CodeNarc inspections on Groovy sources
 * http://codenarc.sourceforge.net/codenarc-ant-task.html
 */
task codenarc() {

    description = 'Runs CodeNarc inspections on Groovy sources.'

    doFirst {

        List<File> sourceDirs = codenarcSources.findAll{ it }.collect{ project.file( it ) }.findAll { it.directory }

        if ( ! sourceDirs ) { return }

        def codenarcRuleSetFilesConverted = codenarcRuleSetFiles.findAll{ it }.collect {
            String filePath -> filePath.startsWith( 'http://' ) ? filePath :
                                                                 'file:' + rootProject.file( filePath ).canonicalPath
        }

        File   reportDir = new File(( File ) project.buildDir, codenarcReportDir )
        assert reportDir.isDirectory() || reportDir.mkdirs()

        /**
         * http://codenarc.sourceforge.net/codenarc-ant-task.html
         */

        ant.taskdef( name      : 'codenarc',
                     classname : 'org.codenarc.ant.CodeNarcTask',
                     classpath : configurations.codenarc.asPath )

        ant.codenarc ( ruleSetFiles           : codenarcRuleSetFilesConverted.join( ',' ),
                       maxPriority1Violations : codenarcPriority1Violations,
                       maxPriority2Violations : codenarcPriority2Violations,
                       maxPriority3Violations : codenarcPriority3Violations ) {
             report    ( type  : codenarcReportType ) {
                option ( name  : 'outputFile',
                         value : new File(( File ) reportDir, codenarcReportFile ).canonicalPath )
                option ( name  : 'title',
                         value : codenarcReportTitle )
             }
             sourceDirs.each {
                 fileset( dir : it, includes : '**/*.groovy, **/*.gradle' )
             }
        }
    }
}
